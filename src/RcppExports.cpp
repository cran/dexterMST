// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// elsym0C
NumericVector elsym0C(NumericVector b, IntegerVector a, IntegerVector first, IntegerVector last);
RcppExport SEXP _dexterMST_elsym0C(SEXP bSEXP, SEXP aSEXP, SEXP firstSEXP, SEXP lastSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type b(bSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type a(aSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type first(firstSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type last(lastSEXP);
    rcpp_result_gen = Rcpp::wrap(elsym0C(b, a, first, last));
    return rcpp_result_gen;
END_RCPP
}
// elsym_submergeC
NumericVector elsym_submergeC(List g_list, List range_list, int routing);
RcppExport SEXP _dexterMST_elsym_submergeC(SEXP g_listSEXP, SEXP range_listSEXP, SEXP routingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type g_list(g_listSEXP);
    Rcpp::traits::input_parameter< List >::type range_list(range_listSEXP);
    Rcpp::traits::input_parameter< int >::type routing(routingSEXP);
    rcpp_result_gen = Rcpp::wrap(elsym_submergeC(g_list, range_list, routing));
    return rcpp_result_gen;
END_RCPP
}
// elsym_mergeC
NumericVector elsym_mergeC(NumericVector b, IntegerVector a, List first, List last, List g_list_, List range_list_, IntegerVector mi1, IntegerVector mi2, int routing);
RcppExport SEXP _dexterMST_elsym_mergeC(SEXP bSEXP, SEXP aSEXP, SEXP firstSEXP, SEXP lastSEXP, SEXP g_list_SEXP, SEXP range_list_SEXP, SEXP mi1SEXP, SEXP mi2SEXP, SEXP routingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type b(bSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type a(aSEXP);
    Rcpp::traits::input_parameter< List >::type first(firstSEXP);
    Rcpp::traits::input_parameter< List >::type last(lastSEXP);
    Rcpp::traits::input_parameter< List >::type g_list_(g_list_SEXP);
    Rcpp::traits::input_parameter< List >::type range_list_(range_list_SEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type mi1(mi1SEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type mi2(mi2SEXP);
    Rcpp::traits::input_parameter< int >::type routing(routingSEXP);
    rcpp_result_gen = Rcpp::wrap(elsym_mergeC(b, a, first, last, g_list_, range_list_, mi1, mi2, routing));
    return rcpp_result_gen;
END_RCPP
}
// E_STEP_MSC
NumericVector E_STEP_MSC(NumericVector b, IntegerVector a, List first, List last, IntegerVector scoretab, IntegerVector min_scores, IntegerVector max_scores, int routing);
RcppExport SEXP _dexterMST_E_STEP_MSC(SEXP bSEXP, SEXP aSEXP, SEXP firstSEXP, SEXP lastSEXP, SEXP scoretabSEXP, SEXP min_scoresSEXP, SEXP max_scoresSEXP, SEXP routingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type b(bSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type a(aSEXP);
    Rcpp::traits::input_parameter< List >::type first(firstSEXP);
    Rcpp::traits::input_parameter< List >::type last(lastSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type scoretab(scoretabSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type min_scores(min_scoresSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type max_scores(max_scoresSEXP);
    Rcpp::traits::input_parameter< int >::type routing(routingSEXP);
    rcpp_result_gen = Rcpp::wrap(E_STEP_MSC(b, a, first, last, scoretab, min_scores, max_scores, routing));
    return rcpp_result_gen;
END_RCPP
}
// H_STEP_MSC
NumericMatrix H_STEP_MSC(NumericVector b, IntegerVector a, List first, List last, IntegerVector scoretab, IntegerVector min_scores, IntegerVector max_scores, int routing);
RcppExport SEXP _dexterMST_H_STEP_MSC(SEXP bSEXP, SEXP aSEXP, SEXP firstSEXP, SEXP lastSEXP, SEXP scoretabSEXP, SEXP min_scoresSEXP, SEXP max_scoresSEXP, SEXP routingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type b(bSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type a(aSEXP);
    Rcpp::traits::input_parameter< List >::type first(firstSEXP);
    Rcpp::traits::input_parameter< List >::type last(lastSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type scoretab(scoretabSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type min_scores(min_scoresSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type max_scores(max_scoresSEXP);
    Rcpp::traits::input_parameter< int >::type routing(routingSEXP);
    rcpp_result_gen = Rcpp::wrap(H_STEP_MSC(b, a, first, last, scoretab, min_scores, max_scores, routing));
    return rcpp_result_gen;
END_RCPP
}
// sampleNRM
IntegerMatrix sampleNRM(NumericVector theta, NumericVector b, IntegerVector a, IntegerVector first, IntegerVector last);
RcppExport SEXP _dexterMST_sampleNRM(SEXP thetaSEXP, SEXP bSEXP, SEXP aSEXP, SEXP firstSEXP, SEXP lastSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type b(bSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type a(aSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type first(firstSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type last(lastSEXP);
    rcpp_result_gen = Rcpp::wrap(sampleNRM(theta, b, a, first, last));
    return rcpp_result_gen;
END_RCPP
}
// prof_probC
void prof_probC(/* output */ NumericMatrix prob, /* input */ IntegerVector min_scores, IntegerVector max_scores, List gA, List gB, IntegerVector MscA, IntegerVector MscB, int nMod, int routing);
RcppExport SEXP _dexterMST_prof_probC(SEXP probSEXP, SEXP min_scoresSEXP, SEXP max_scoresSEXP, SEXP gASEXP, SEXP gBSEXP, SEXP MscASEXP, SEXP MscBSEXP, SEXP nModSEXP, SEXP routingSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< /* output */ NumericMatrix >::type prob(probSEXP);
    Rcpp::traits::input_parameter< /* input */ IntegerVector >::type min_scores(min_scoresSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type max_scores(max_scoresSEXP);
    Rcpp::traits::input_parameter< List >::type gA(gASEXP);
    Rcpp::traits::input_parameter< List >::type gB(gBSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type MscA(MscASEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type MscB(MscBSEXP);
    Rcpp::traits::input_parameter< int >::type nMod(nModSEXP);
    Rcpp::traits::input_parameter< int >::type routing(routingSEXP);
    prof_probC(prob, min_scores, max_scores, gA, gB, MscA, MscB, nMod, routing);
    return R_NilValue;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_dexterMST_elsym0C", (DL_FUNC) &_dexterMST_elsym0C, 4},
    {"_dexterMST_elsym_submergeC", (DL_FUNC) &_dexterMST_elsym_submergeC, 3},
    {"_dexterMST_elsym_mergeC", (DL_FUNC) &_dexterMST_elsym_mergeC, 9},
    {"_dexterMST_E_STEP_MSC", (DL_FUNC) &_dexterMST_E_STEP_MSC, 8},
    {"_dexterMST_H_STEP_MSC", (DL_FUNC) &_dexterMST_H_STEP_MSC, 8},
    {"_dexterMST_sampleNRM", (DL_FUNC) &_dexterMST_sampleNRM, 5},
    {"_dexterMST_prof_probC", (DL_FUNC) &_dexterMST_prof_probC, 9},
    {NULL, NULL, 0}
};

RcppExport void R_init_dexterMST(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
